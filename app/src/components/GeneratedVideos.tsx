import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Alert,
  RefreshControl,
} from 'react-native';
import { MDS, getModernShadow, getModernSpacing, getModernFontSize, getModernBorderRadius } from '../config/modernDesignSystem';

interface GeneratedVideo {
  id: string;
  title: string;
  category: string;
  duration: string;
  generatedAt: string;
  status: 'processing' | 'ready' | 'failed';
  thumbnailUrl?: string;
  videoUrl?: string;
}

// Mock data - in a real app, this would come from your backend
const mockGeneratedVideos: GeneratedVideo[] = [
  {
    id: 'gen-1',
    title: 'Ocean Robot Adventure - AI Generated',
    category: 'Environment',
    duration: '7:23',
    generatedAt: '2 hours ago',
    status: 'ready',
  },
  {
    id: 'gen-2',
    title: 'Space Explorer Mission - AI Generated',
    category: 'Space',
    duration: '8:45',
    generatedAt: '1 day ago',
    status: 'ready',
  },
  {
    id: 'gen-3',
    title: 'Young Inventors Story - AI Generated',
    category: 'Technology',
    duration: '6:30',
    generatedAt: '2 days ago',
    status: 'processing',
  },
];

interface GeneratedVideosProps {
  onVideoSelect?: (video: GeneratedVideo) => void;
}

const GeneratedVideos: React.FC<GeneratedVideosProps> = ({ onVideoSelect }) => {
  const [videos, setVideos] = useState<GeneratedVideo[]>(mockGeneratedVideos);
  const [refreshing, setRefreshing] = useState(false);

  const refreshVideos = async () => {
    setRefreshing(true);
    // Simulate API call to check for new generated videos
    setTimeout(() => {
      // In a real app, you would fetch from your backend
      setRefreshing(false);
      Alert.alert('Updated!', 'Checked for new generated videos from the backend.');
    }, 1500);
  };

  const renderVideoItem = ({ item }: { item: GeneratedVideo }) => (
    <TouchableOpacity 
      style={styles.videoItem} 
      onPress={() => onVideoSelect?.(item)}
      disabled={item.status !== 'ready'}
    >
      <View style={styles.videoThumbnail}>
        <Text style={styles.videoEmoji}>
          {item.status === 'processing' ? '‚è≥' : item.status === 'failed' ? '‚ùå' : 'üé¨'}
        </Text>
      </View>
      <View style={styles.videoInfo}>
        <Text style={styles.videoTitle} numberOfLines={2}>{item.title}</Text>
        <Text style={styles.videoCategory}>{item.category}</Text>
        <View style={styles.videoMeta}>
          <Text style={styles.videoDuration}>{item.duration}</Text>
          <Text style={styles.videoGenerated}>{item.generatedAt}</Text>
        </View>
        <View style={[styles.statusBadge, styles[`${item.status}Badge`]]}>
          <Text style={styles.statusText}>
            {item.status === 'processing' ? 'PROCESSING' : 
             item.status === 'failed' ? 'FAILED' : 'READY'}
          </Text>
        </View>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>ü§ñ AI Generated Videos</Text>
        <Text style={styles.headerSubtitle}>
          Videos created by our backend AI system
        </Text>
      </View>

      {videos.length === 0 ? (
        <View style={styles.emptyState}>
          <Text style={styles.emptyIcon}>üé¨</Text>
          <Text style={styles.emptyTitle}>No Generated Videos Yet</Text>
          <Text style={styles.emptyText}>
            Videos generated by our AI system will appear here when ready!
          </Text>
          <TouchableOpacity style={styles.refreshButton} onPress={refreshVideos}>
            <Text style={styles.refreshButtonText}>üîÑ Check for Videos</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <FlatList
          data={videos}
          renderItem={renderVideoItem}
          keyExtractor={item => item.id}
          refreshControl={
            <RefreshControl
              refreshing={refreshing}
              onRefresh={refreshVideos}
              tintColor={MDS.colors.primary.main}
            />
          }
          contentContainerStyle={styles.listContainer}
        />
      )}

      <View style={styles.infoBox}>
        <Text style={styles.infoIcon}>‚ÑπÔ∏è</Text>
        <Text style={styles.infoText}>
          Video generation happens on our servers using your story content. 
          Processing typically takes 5-10 minutes per video.
        </Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: MDS.colors.background.primary,
  },
  header: {
    padding: getModernSpacing('lg'),
    backgroundColor: MDS.colors.background.elevated,
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
  },
  headerTitle: {
    fontSize: getModernFontSize('xl'),
    fontWeight: MDS.typography.weights.bold,
    color: MDS.colors.text.primary,
  },
  headerSubtitle: {
    fontSize: getModernFontSize('base'),
    color: MDS.colors.text.secondary,
    marginTop: 4,
  },
  listContainer: {
    padding: getModernSpacing('md'),
  },
  videoItem: {
    flexDirection: 'row',
    backgroundColor: MDS.colors.background.elevated,
    borderRadius: getModernBorderRadius('lg'),
    padding: getModernSpacing('md'),
    marginBottom: getModernSpacing('md'),
    ...getModernShadow('md'),
  },
  videoThumbnail: {
    width: 80,
    height: 80,
    borderRadius: getModernBorderRadius('lg'),
    backgroundColor: MDS.colors.background.secondary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: getModernSpacing('md'),
  },
  videoEmoji: {
    fontSize: 32,
  },
  videoInfo: {
    flex: 1,
    position: 'relative',
  },
  videoTitle: {
    fontSize: getModernFontSize('lg'),
    fontWeight: MDS.typography.weights.bold,
    color: MDS.colors.text.primary,
    marginBottom: getModernSpacing('xs'),
  },
  videoCategory: {
    fontSize: getModernFontSize('sm'),
    color: MDS.colors.primary.main,
    fontWeight: MDS.typography.weights.semibold,
    marginBottom: getModernSpacing('sm'),
  },
  videoMeta: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: getModernSpacing('sm'),
  },
  videoDuration: {
    fontSize: getModernFontSize('sm'),
    color: MDS.colors.text.secondary,
  },
  videoGenerated: {
    fontSize: getModernFontSize('sm'),
    color: MDS.colors.text.secondary,
  },
  statusBadge: {
    position: 'absolute',
    top: 0,
    right: 0,
    paddingHorizontal: getModernSpacing('sm'),
    paddingVertical: 4,
    borderRadius: getModernBorderRadius('sm'),
  },
  processingBadge: {
    backgroundColor: MDS.colors.status.warning,
  },
  readyBadge: {
    backgroundColor: MDS.colors.status.success,
  },
  failedBadge: {
    backgroundColor: MDS.colors.status.error,
  },
  statusText: {
    fontSize: getModernFontSize('xs'),
    fontWeight: MDS.typography.weights.bold,
    color: MDS.colors.text.inverse,
    letterSpacing: 0.5,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: getModernSpacing('xl'),
  },
  emptyIcon: {
    fontSize: 64,
    marginBottom: getModernSpacing('lg'),
  },
  emptyTitle: {
    fontSize: getModernFontSize('xl'),
    fontWeight: MDS.typography.weights.bold,
    color: MDS.colors.text.primary,
    marginBottom: getModernSpacing('sm'),
  },
  emptyText: {
    fontSize: getModernFontSize('base'),
    color: MDS.colors.text.secondary,
    textAlign: 'center',
    lineHeight: getModernFontSize('base') * 1.5,
    marginBottom: getModernSpacing('xl'),
  },
  refreshButton: {
    backgroundColor: MDS.colors.primary.main,
    paddingHorizontal: getModernSpacing('xl'),
    paddingVertical: getModernSpacing('md'),
    borderRadius: getModernBorderRadius('lg'),
    ...getModernShadow('md'),
  },
  refreshButtonText: {
    fontSize: getModernFontSize('base'),
    fontWeight: MDS.typography.weights.bold,
    color: MDS.colors.text.inverse,
  },
  infoBox: {
    backgroundColor: MDS.colors.background.elevated,
    borderRadius: getModernBorderRadius('lg'),
    padding: getModernSpacing('lg'),
    margin: getModernSpacing('md'),
    flexDirection: 'row',
    alignItems: 'flex-start',
    borderLeftWidth: 4,
    borderLeftColor: MDS.colors.accent.main,
    ...getModernShadow('sm'),
  },
  infoIcon: {
    fontSize: 20,
    marginRight: getModernSpacing('md'),
    marginTop: 2,
  },
  infoText: {
    flex: 1,
    fontSize: getModernFontSize('sm'),
    color: MDS.colors.text.secondary,
    lineHeight: getModernFontSize('sm') * 1.5,
  },
});

export default GeneratedVideos;
